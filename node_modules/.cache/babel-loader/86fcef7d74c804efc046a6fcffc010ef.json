{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sahirali/Tech-Stack/REACT_Projects/Music-App/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\"; // APP DATA -> SONGS\n\nimport data from \"./data\"; // COMPONENTS\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; // import { library } from \"@fortawesome/fontawesome-svg-core\";\n\nfunction App() {\n  _s();\n\n  // STATE\n  // data() - returns the song data\n  const [songs, setSongs] = useState(data()); // songs[0] -> default currentSong\n\n  const [currentSong, setCurrentSong] = useState(songs[0]); // Paused by default\n\n  const [isPlaying, setIsPlaying] = useState(false); // Default Time\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  }); // Library closed by default\n\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdate = event => {\n    const current = event.target.currentTime;\n    const duration = event.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  }; // Reference -> audio\n\n\n  const audioRef = useRef(null); // SKIPPING FORWARD -> when song ends\n\n  const songEnd = async () => {\n    let currentIdx = songs.findIndex(song => song.id === currentSong.id); // CHECK IF LAST SONG\n\n    if (currentIdx === songs.length - 1) {\n      await setCurrentSong(songs[0]);\n      if (isPlaying) audioRef.current.play();\n      return;\n    }\n\n    await setCurrentSong(songs[currentIdx + 1]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${libraryStatus ? \"library-active\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      songs: songs,\n      setSongs: setSongs,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      setCurrentSong: setCurrentSong,\n      songInfo: songInfo,\n      setSongInfo: setSongInfo,\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdate,\n      onLoadedMetadata: timeUpdate,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vkxJGdpOeJNBL61X//B4aAS88XU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/REACT_Projects/Music-App/src/App.js"],"names":["React","useState","useRef","data","Player","Song","Library","Nav","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","libraryStatus","setLibraryStatus","timeUpdate","event","current","target","audioRef","songEnd","currentIdx","findIndex","song","id","length","play","audio"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,mBAAP,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CACA;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACE,IAAI,EAAL,CAAlC,CAHa,CAIb;;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAN,CAA9C,CALa,CAMb;;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C,CAPa,CAQb;;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACvCgB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC,CATa,CAab;;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAMoB,UAAU,GAAIC,KAAD,IAAW;AAC5B,UAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaP,WAA7B;AACA,UAAMC,QAAQ,GAAGI,KAAK,CAACE,MAAN,CAAaN,QAA9B;AACAF,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,WAAW,EAAEM,OAA5B;AAAqCL,MAAAA;AAArC,KAAD,CAAX;AACD,GAJD,CAhBa,CAsBb;;;AACA,QAAMO,QAAQ,GAAGvB,MAAM,CAAC,IAAD,CAAvB,CAvBa,CAyBb;;AACA,QAAMwB,OAAO,GAAG,YAAY;AAC1B,QAAIC,UAAU,GAAGlB,KAAK,CAACmB,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYnB,WAAW,CAACmB,EAAlD,CAAjB,CAD0B,CAE1B;;AACA,QAAIH,UAAU,KAAKlB,KAAK,CAACsB,MAAN,GAAe,CAAlC,EAAqC;AACnC,YAAMnB,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,CAApB;AACA,UAAII,SAAJ,EAAeY,QAAQ,CAACF,OAAT,CAAiBS,IAAjB;AACf;AACD;;AACD,UAAMpB,cAAc,CAACH,KAAK,CAACkB,UAAU,GAAG,CAAd,CAAN,CAApB;AACA,QAAId,SAAJ,EAAeY,QAAQ,CAACF,OAAT,CAAiBS,IAAjB;AAChB,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAG,OAAMb,aAAa,GAAG,gBAAH,GAAsB,EAAG,EAA7D;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEA,aAApB;AAAmC,MAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,SAAS,EAAEG,SAHb;AAIE,MAAA,YAAY,EAAEC,YAJhB;AAKE,MAAA,WAAW,EAAEH,WALf;AAME,MAAA,cAAc,EAAEC,cANlB;AAOE,MAAA,QAAQ,EAAEG,QAPZ;AAQE,MAAA,WAAW,EAAEC,WARf;AASE,MAAA,QAAQ,EAAES;AATZ;AAAA;AAAA;AAAA;AAAA,YAHF,eAcE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEhB,KADT;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,cAAc,EAAEE,cAHlB;AAIE,MAAA,QAAQ,EAAEa,QAJZ;AAKE,MAAA,SAAS,EAAEZ,SALb;AAME,MAAA,YAAY,EAAEC,YANhB;AAOE,MAAA,aAAa,EAAEK;AAPjB;AAAA;AAAA;AAAA;AAAA,YAdF,eAuBE;AACE,MAAA,YAAY,EAAEE,UADhB;AAEE,MAAA,gBAAgB,EAAEA,UAFpB;AAGE,MAAA,GAAG,EAAEI,QAHP;AAIE,MAAA,GAAG,EAAEd,WAAW,CAACsB,KAJnB;AAKE,MAAA,OAAO,EAAEP;AALX;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GAvEQlB,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\";\n\n// APP DATA -> SONGS\nimport data from \"./data\";\n\n// COMPONENTS\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n\n\nfunction App() {\n  // STATE\n  // data() - returns the song data\n  const [songs, setSongs] = useState(data());\n  // songs[0] -> default currentSong\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  // Paused by default\n  const [isPlaying, setIsPlaying] = useState(false);\n  // Default Time\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  // Library closed by default\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdate = (event) => {\n    const current = event.target.currentTime;\n    const duration = event.target.duration;\n    setSongInfo({ ...songInfo, currentTime: current, duration });\n  };\n\n  // Reference -> audio\n  const audioRef = useRef(null);\n\n  // SKIPPING FORWARD -> when song ends\n  const songEnd = async () => {\n    let currentIdx = songs.findIndex((song) => song.id === currentSong.id);\n    // CHECK IF LAST SONG\n    if (currentIdx === songs.length - 1) {\n      await setCurrentSong(songs[0]);\n      if (isPlaying) audioRef.current.play();\n      return;\n    }\n    await setCurrentSong(songs[currentIdx + 1]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        songs={songs}\n        setSongs={setSongs}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        setCurrentSong={setCurrentSong}\n        songInfo={songInfo}\n        setSongInfo={setSongInfo}\n        audioRef={audioRef}\n      />\n      <Library\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdate}\n        onLoadedMetadata={timeUpdate}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEnd}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}