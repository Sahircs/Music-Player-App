{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/LibrarySong.js\";\n// Displays name, artist and picture\nimport React from \"react\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  key,\n  audioRef,\n  isPlaying,\n  setIsPlaying\n}) => {\n  const songSelect = () => {\n    setCurrentSong(song); // SET ACTIVE\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: True\n        };\n      } else {\n        return { ...song,\n          active: False\n        };\n      }\n    }); // Song not loaded up -> use Promise() -> when fully loaded -> play\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  }; // setIsPlaying(!isPlaying);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelect,\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", song.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\" \", song.artist, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","key","audioRef","isPlaying","setIsPlaying","songSelect","newSongs","map","active","True","False","playPromise","current","play","undefined","then","audio","cover","name","artist"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,GALmB;AAMnBC,EAAAA,QANmB;AAOnBC,EAAAA,SAPmB;AAQnBC,EAAAA;AARmB,CAAD,KASd;AACJ,QAAMC,UAAU,GAAG,MAAM;AACvBN,IAAAA,cAAc,CAACF,IAAD,CAAd,CADuB,CAEvB;;AACA,UAAMS,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAWV,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EAAE,GAAGH,IAAL;AAAWW,UAAAA,MAAM,EAAEC;AAAnB,SAAP;AACD,OAFD,MAEO;AACL,eAAO,EAAE,GAAGZ,IAAL;AAAWW,UAAAA,MAAM,EAAEE;AAAnB,SAAP;AACD;AACF,KANgB,CAAjB,CAHuB,CAUvB;;AACA,QAAIP,SAAJ,EAAe;AACb,YAAMQ,WAAW,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAIF,WAAW,KAAKG,SAApB,EAA+B;AAC7BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AAC1Bd,UAAAA,QAAQ,CAACU,OAAT,CAAiBC,IAAjB;AACD,SAFD;AAGD;AACF;AACF,GAnBD,CADI,CAqBJ;;;AACA,sBACE;AACE,IAAA,OAAO,EAAER,UADX;AAEE,IAAA,SAAS,EAAG,gBAAeR,IAAI,CAACW,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAEX,IAAI,CAACoB,KAAf;AAAsB,MAAA,GAAG,EAAEpB,IAAI,CAACqB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,wBAAMrB,IAAI,CAACqB,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMrB,IAAI,CAACsB,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3CD;;KAAMvB,W;AA6CN,eAAeA,WAAf","sourcesContent":["// Displays name, artist and picture\nimport React from \"react\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  key,\n  audioRef,\n  isPlaying,\n  setIsPlaying,\n}) => {\n  const songSelect = () => {\n    setCurrentSong(song);\n    // SET ACTIVE\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return { ...song, active: True };\n      } else {\n        return { ...song, active: False };\n      }\n    });\n    // Song not loaded up -> use Promise() -> when fully loaded -> play\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.then((audio) => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n  // setIsPlaying(!isPlaying);\n  return (\n    <div\n      onClick={songSelect}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img src={song.cover} alt={song.name}></img>\n      <div className=\"song-description\">\n        <h3> {song.name} </h3>\n        <h4> {song.artist} </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}