{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/Player.js\",\n    _s = $RefreshSig$();\n\n// Controls for music player\nimport React, { useEffect } from \"react\"; // Component\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // Icons\n\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\"; // Play functionality when changing songs\n\nimport { playAudio } from \"../util\";\n\nconst Player = ({\n  songs,\n  setSongs,\n  currentSong,\n  setCurrentSong,\n  isPlaying,\n  setIsPlaying,\n  songInfo,\n  setSongInfo,\n  audioRef\n}) => {\n  _s();\n\n  // UseEffect -> for updating '.selected' -> to highlight currentSong\n  useEffect(() => {\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  }, [currentSong]); // [EVENT HANDLERS]\n  // Play/Pause functionality\n\n  const playSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  }; // Returns time in readable format\n\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; // Value = song.currentTime -> so to update scrollbar -> update currentTime\n\n\n  const dragHandler = event => {\n    // Syncing audio with scrollbar\n    audioRef.current.currentTime = event.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: event.target.value\n    });\n  }; // NEXT/PAST SONG\n\n\n  const skipTrack = direction => {\n    let currentIdx = songs.findIndex(song => song.id === currentSong.id); // SKIPPING FORWARD\n\n    if (direction === \"skip-forward\") {\n      // CHECK IF LAST SONG\n      if (currentIdx === songs.length - 1) {\n        setCurrentSong(songs[0]);\n        return;\n      }\n\n      setCurrentSong(songs[currentIdx + 1]);\n    } else {\n      // SKIPPING BACKWARD\n      if (currentIdx === 0) {\n        // CHECK IF 1ST SONG\n        setCurrentSong(songs[songs.length - 1]);\n        return;\n      }\n\n      setCurrentSong(songs[currentIdx - 1]);\n    }\n\n    playAudio(isPlaying, audioRef);\n  }; // [MAIN BODY]\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration || 0,\n        onChange: dragHandler,\n        value: songInfo.currentTime,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrack(\"skip-back\"),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSong,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrack(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/Player.js"],"names":["React","useEffect","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","playAudio","Player","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","audioRef","newSongs","map","song","id","active","playSong","current","pause","play","getTime","time","Math","floor","slice","dragHandler","event","currentTime","target","value","skipTrack","direction","currentIdx","findIndex","length","duration"],"mappings":"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","sourcesContent":["// Controls for music player\nimport React, { useEffect } from \"react\";\n// Component\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// Icons\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n// Play functionality when changing songs\nimport { playAudio } from \"../util\";\n\nconst Player = ({\n  songs,\n  setSongs,\n  currentSong,\n  setCurrentSong,\n  isPlaying,\n  setIsPlaying,\n  songInfo,\n  setSongInfo,\n  audioRef,\n}) => {\n  // UseEffect -> for updating '.selected' -> to highlight currentSong\n  useEffect(() => {\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return { ...song, active: true };\n      } else {\n        return { ...song, active: false };\n      }\n    });\n    setSongs(newSongs);\n  }, [currentSong]);\n\n  // [EVENT HANDLERS]\n  // Play/Pause functionality\n  const playSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  // Returns time in readable format\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n  // Value = song.currentTime -> so to update scrollbar -> update currentTime\n  const dragHandler = (event) => {\n    // Syncing audio with scrollbar\n    audioRef.current.currentTime = event.target.value;\n    setSongInfo({ ...songInfo, currentTime: event.target.value });\n  };\n\n  // NEXT/PAST SONG\n  const skipTrack = (direction) => {\n    let currentIdx = songs.findIndex((song) => song.id === currentSong.id);\n    // SKIPPING FORWARD\n    if (direction === \"skip-forward\") {\n      // CHECK IF LAST SONG\n      if (currentIdx === songs.length - 1) {\n        setCurrentSong(songs[0]);\n        return;\n      }\n      setCurrentSong(songs[currentIdx + 1]);\n    } else {\n      // SKIPPING BACKWARD\n      if (currentIdx === 0) {\n        // CHECK IF 1ST SONG\n        setCurrentSong(songs[songs.length - 1]);\n        return;\n      }\n      setCurrentSong(songs[currentIdx - 1]);\n    }\n    playAudio(isPlaying, audioRef);\n  };\n\n  // [MAIN BODY]\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration || 0}\n          onChange={dragHandler}\n          value={songInfo.currentTime}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          onClick={() => skipTrack(\"skip-back\")}\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n        />\n        <FontAwesomeIcon\n          onClick={playSong}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrack(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}