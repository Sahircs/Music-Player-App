{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/Player.js\",\n    _s = $RefreshSig$();\n\n// Controls for music player\nimport React, { useState } from \"react\"; // Component\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // Icons\n\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  songI\n}) => {\n  _s();\n\n  // [EVENT HANDLERS]\n  // Play/Pause functionality\n  const playSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  }; // Returns time in readable format\n\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; // Value = song.currentTime -> so to update scrollbar -> update currentTime\n\n\n  const dragHandler = event => {\n    // Syncing audio with scrollbar\n    audioRef.current.currentTime = event.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: event.target.value\n    });\n  }; // [STATE]\n\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n\n  const timeUpdate = event => {\n    const current = event.target.currentTime;\n    const duration = event.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  }; // [MAIN BODY]\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration,\n        onChange: dragHandler,\n        value: songInfo.currentTime,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSong,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"WKDVijOVAYAxBomD/QxdNzU11mM=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/REACT_Projects/music-app/src/components/Player.js"],"names":["React","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","audioRef","currentSong","isPlaying","setIsPlaying","songI","playSong","current","pause","play","getTime","time","Math","floor","slice","dragHandler","event","currentTime","target","value","setSongInfo","songInfo","duration","timeUpdate"],"mappings":"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","sourcesContent":["// Controls for music player\nimport React, { useState } from \"react\";\n// Component\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// Icons\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({ audioRef, currentSong, isPlaying, setIsPlaying, songI }) => {\n  // [EVENT HANDLERS]\n  // Play/Pause functionality\n  const playSong = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n  // Returns time in readable format\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n  // Value = song.currentTime -> so to update scrollbar -> update currentTime\n  const dragHandler = (event) => {\n    // Syncing audio with scrollbar\n    audioRef.current.currentTime = event.target.value;\n    setSongInfo({ ...songInfo, currentTime: event.target.value });\n  };\n\n  // [STATE]\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  const timeUpdate = (event) => {\n    const current = event.target.currentTime;\n    const duration = event.target.duration;\n    setSongInfo({ ...songInfo, currentTime: current, duration });\n  };\n\n  // [MAIN BODY]\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration}\n          onChange={dragHandler}\n          value={songInfo.currentTime}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\n        <FontAwesomeIcon\n          onClick={playSong}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}